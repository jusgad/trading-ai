#!/usr/bin/env python3
"""
Trading AI Demo Script
Demonstrates the key capabilities of the Trading AI system
"""

import sys
import os
import time
from datetime import datetime, timedelta

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def print_header(title):
    """Print formatted header"""
    print("\n" + "="*60)
    print(f"ü§ñ {title}")
    print("="*60)

def print_section(title):
    """Print formatted section"""
    print(f"\nüìä {title}")
    print("-"*40)

def demo_signal_generation():
    """Demonstrate signal generation"""
    print_header("DEMO: Generaci√≥n de Se√±ales de Trading")
    
    try:
        from src.signals.signal_generator import SignalGenerator
        from src.monitoring.performance_monitor import PerformanceMonitor
        
        print("‚úÖ Inicializando sistema...")
        generator = SignalGenerator(account_balance=100000)
        monitor = PerformanceMonitor()
        
        # Demo symbols
        demo_symbols = ['AAPL', 'GOOGL', 'MSFT']
        
        print(f"üìà Generando se√±ales para: {', '.join(demo_symbols)}")
        print("‚è≥ Esto puede tomar unos segundos...")
        
        signals = []
        for symbol in demo_symbols:
            try:
                print(f"   Analizando {symbol}...")
                signal = generator.generate_signal(symbol)
                if signal:
                    signals.append(signal)
                    # Log signal to monitoring system
                    monitor.log_signal(signal)
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error con {symbol}: {str(e)}")
        
        if signals:
            print_section("Se√±ales Generadas")
            for i, signal in enumerate(signals, 1):
                print(f"\n{i}. {signal.symbol}")
                print(f"   Se√±al: {_format_signal(signal.signal)} ({signal.confidence:.1%} confianza)")
                print(f"   Precio actual: ${signal.current_price:.2f}")
                print(f"   Stop Loss: ${signal.stop_loss:.2f}")
                print(f"   Take Profit: ${signal.take_profit:.2f}")
                print(f"   Tama√±o posici√≥n: {signal.position_size:.0f}")
                print(f"   Riesgo m√°ximo: ${signal.max_loss:.2f}")
                print(f"   Ratio R/R: {signal.risk_reward_ratio:.1f}")
                print(f"   Raz√≥n: {signal.reasoning[:100]}...")
        else:
            print("‚ö†Ô∏è  No se generaron se√±ales v√°lidas")
            
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("üí° Ejecuta: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def demo_technical_analysis():
    """Demonstrate technical analysis"""
    print_header("DEMO: An√°lisis T√©cnico")
    
    try:
        from src.data.data_fetcher import MarketDataFetcher
        from src.indicators.technical_indicators import TechnicalIndicators
        
        print("üìä Obteniendo datos de mercado...")
        fetcher = MarketDataFetcher()
        
        # Get sample data
        symbol = 'AAPL'
        data = fetcher.fetch_data(symbol, period='1mo')
        
        if data is not None and len(data) > 0:
            print(f"‚úÖ Datos obtenidos: {len(data)} puntos para {symbol}")
            
            print("üîß Calculando indicadores t√©cnicos...")
            indicators = TechnicalIndicators.calculate_all_indicators(data)
            
            latest = indicators.iloc[-1]
            
            print_section("An√°lisis T√©cnico Actual")
            print(f"S√≠mbolo: {symbol}")
            print(f"Precio actual: ${latest['close']:.2f}")
            print(f"Volumen: {latest['volume']:,}")
            
            if 'rsi' in indicators.columns:
                rsi = latest['rsi']
                rsi_status = "Sobrecomprado" if rsi > 70 else "Sobrevendido" if rsi < 30 else "Neutral"
                print(f"RSI: {rsi:.1f} ({rsi_status})")
            
            if 'sma_20' in indicators.columns and 'sma_50' in indicators.columns:
                trend = "Alcista" if latest['sma_20'] > latest['sma_50'] else "Bajista"
                print(f"Tendencia (SMA): {trend}")
            
            if 'macd' in indicators.columns and 'macd_signal' in indicators.columns:
                macd_trend = "Alcista" if latest['macd'] > latest['macd_signal'] else "Bajista"
                print(f"MACD: {macd_trend}")
            
            if 'bb_upper' in indicators.columns and 'bb_lower' in indicators.columns:
                bb_pos = "Banda superior" if latest['close'] > latest['bb_upper'] else \
                        "Banda inferior" if latest['close'] < latest['bb_lower'] else \
                        "Rango normal"
                print(f"Bollinger Bands: {bb_pos}")
            
            if 'volatility' in indicators.columns:
                vol_level = "Alta" if latest['volatility'] > 0.03 else "Normal"
                print(f"Volatilidad: {vol_level} ({latest['volatility']:.1%})")
            
        else:
            print("‚ùå No se pudieron obtener datos de mercado")
            print("üí° Verifica tu conexi√≥n a internet")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def demo_risk_management():
    """Demonstrate risk management"""
    print_header("DEMO: Gesti√≥n de Riesgo")
    
    try:
        from src.risk.risk_manager import RiskManager
        import pandas as pd
        import numpy as np
        
        print("üõ°Ô∏è  Inicializando sistema de gesti√≥n de riesgo...")
        risk_manager = RiskManager(initial_capital=100000)
        
        # Create sample market data
        dates = pd.date_range(start='2023-01-01', periods=100, freq='D')
        np.random.seed(42)
        
        prices = [100]
        for _ in range(99):
            prices.append(prices[-1] * (1 + np.random.normal(0, 0.02)))
        
        sample_data = pd.DataFrame({
            'open': prices,
            'high': [p * 1.02 for p in prices],
            'low': [p * 0.98 for p in prices],
            'close': prices,
            'volume': np.random.randint(1000000, 10000000, 100),
            'atr': [2.0] * 100,
            'volatility': [0.02] * 100
        }, index=dates)
        
        print_section("Ejemplo de C√°lculo de Riesgo")
        
        current_price = 100.0
        confidence = 0.75
        account_balance = 100000.0
        
        print(f"Precio actual: ${current_price:.2f}")
        print(f"Confianza de se√±al: {confidence:.1%}")
        print(f"Balance de cuenta: ${account_balance:,.0f}")
        
        # Calculate risk metrics
        risk_metrics = risk_manager.generate_risk_assessment(
            signal='BUY',
            current_price=current_price,
            market_data=sample_data,
            confidence=confidence,
            account_balance=account_balance
        )
        
        print(f"\nüìã M√©tricas de Riesgo Calculadas:")
        print(f"   Tama√±o de posici√≥n: {risk_metrics.position_size:.0f} acciones")
        print(f"   Stop Loss: ${risk_metrics.stop_loss:.2f}")
        print(f"   Take Profit: ${risk_metrics.take_profit:.2f}")
        print(f"   Ratio Riesgo/Beneficio: {risk_metrics.risk_reward_ratio:.1f}")
        print(f"   P√©rdida m√°xima: ${risk_metrics.max_loss:.2f}")
        print(f"   Riesgo de volatilidad: {risk_metrics.volatility_risk:.1%}")
        
        # Validate signal
        validation = risk_manager.validate_signal('BUY', risk_metrics, sample_data)
        
        print(f"\n‚úÖ Validaci√≥n de Se√±al:")
        print(f"   V√°lida: {'S√≠' if validation['is_valid'] else 'No'}")
        print(f"   Score de riesgo: {validation['risk_score']:.1%}")
        if validation['warnings']:
            print(f"   Advertencias: {', '.join(validation['warnings'])}")
        if validation['recommendations']:
            print(f"   Recomendaciones: {', '.join(validation['recommendations'])}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def demo_backtesting():
    """Demonstrate backtesting (simplified)"""
    print_header("DEMO: Backtesting")
    
    try:
        print("üìà El backtesting completo requiere datos hist√≥ricos extensos")
        print("üîß Mostrando capacidades del framework...")
        
        from src.backtesting.backtester import Backtester
        
        backtester = Backtester(initial_capital=100000, commission=0.001)
        
        print_section("Configuraci√≥n de Backtesting")
        print(f"Capital inicial: ${backtester.initial_capital:,.0f}")
        print(f"Comisi√≥n: {backtester.commission:.1%}")
        print("S√≠mbolos de ejemplo: AAPL, GOOGL, MSFT")
        print("Per√≠odo de ejemplo: 2023-01-01 a 2024-01-01")
        
        print(f"\nüí° Para ejecutar un backtest completo:")
        print(f"   python main.py backtest --symbols AAPL GOOGL --start-date 2023-01-01")
        
        print(f"\nüìä El backtesting incluye:")
        print(f"   ‚Ä¢ Retorno total y porcentual")
        print(f"   ‚Ä¢ Ratio de Sharpe")
        print(f"   ‚Ä¢ M√°ximo drawdown")
        print(f"   ‚Ä¢ Tasa de √©xito")
        print(f"   ‚Ä¢ Factor de beneficio")
        print(f"   ‚Ä¢ Duraci√≥n promedio de operaciones")
        print(f"   ‚Ä¢ An√°lisis de trades individuales")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

def demo_monitoring():
    """Demonstrate performance monitoring"""
    print_header("DEMO: Monitoreo de Rendimiento")
    
    try:
        from src.monitoring.performance_monitor import PerformanceMonitor
        from src.signals.signal_generator import TradingSignal
        from datetime import datetime
        
        print("üìä Inicializando sistema de monitoreo...")
        monitor = PerformanceMonitor()
        
        print_section("Capacidades de Monitoreo")
        print("‚úÖ Base de datos SQLite para almacenamiento")
        print("‚úÖ Seguimiento de se√±ales activas")
        print("‚úÖ C√°lculo autom√°tico de P&L")
        print("‚úÖ Reportes de rendimiento")
        print("‚úÖ An√°lisis por s√≠mbolo y confianza")
        
        # Get dashboard data
        dashboard_data = monitor.get_dashboard_data()
        
        overall_perf = dashboard_data['overall_performance']
        
        print_section("Estado Actual del Sistema")
        print(f"Se√±ales totales: {overall_perf['total_signals']}")
        print(f"Se√±ales cerradas: {overall_perf['closed_signals']}")
        print(f"Se√±ales activas: {overall_perf['active_signals']}")
        print(f"Tasa de √©xito: {overall_perf['win_rate']:.1%}")
        print(f"P&L promedio: ${overall_perf['avg_pnl']:.2f}")
        
        print(f"\nüí° Para ver reportes detallados:")
        print(f"   python main.py report")
        print(f"   python main.py dashboard  # Tab 'Settings' > Performance")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

def _format_signal(signal):
    """Format signal with emoji"""
    if signal == 'BUY':
        return 'üü¢ COMPRAR'
    elif signal == 'SELL':
        return 'üî¥ VENDER'
    else:
        return '‚ö™ MANTENER'

def demo_dashboard_info():
    """Show dashboard information"""
    print_header("DEMO: Dashboard Web")
    
    print("üåê El Trading AI incluye un dashboard web completo")
    
    print_section("Caracter√≠sticas del Dashboard")
    print("üéØ Live Signals:")
    print("   ‚Ä¢ Generaci√≥n de se√±ales en tiempo real")
    print("   ‚Ä¢ An√°lisis de confianza y riesgo")
    print("   ‚Ä¢ Recomendaciones de posici√≥n")
    
    print("\nüìä Analysis:")
    print("   ‚Ä¢ Gr√°ficos interactivos de precios")
    print("   ‚Ä¢ Indicadores t√©cnicos superpuestos")
    print("   ‚Ä¢ An√°lisis de m√∫ltiples timeframes")
    
    print("\nüîÑ Backtesting:")
    print("   ‚Ä¢ Interface para backtesting hist√≥rico")
    print("   ‚Ä¢ M√©tricas de rendimiento detalladas")
    print("   ‚Ä¢ Gr√°ficos de drawdown y retornos")
    
    print("\n‚öôÔ∏è Settings:")
    print("   ‚Ä¢ Configuraci√≥n de par√°metros de riesgo")
    print("   ‚Ä¢ Entrenamiento de modelos AI")
    print("   ‚Ä¢ Monitoreo de rendimiento")
    
    print(f"\nüöÄ Para iniciar el dashboard:")
    print(f"   ./scripts/start_dashboard.sh")
    print(f"   # o")
    print(f"   python main.py dashboard")
    print(f"\nüåê Luego visita: http://localhost:8501")

def main():
    """Run all demos"""
    print("ü§ñ TRADING AI - SISTEMA DE DEMOSTRACI√ìN")
    print("=" * 60)
    print("Este demo muestra las principales capacidades del sistema")
    print("‚ö†Ô∏è  Los datos generados son para demostraci√≥n √∫nicamente")
    print("")
    
    demos = [
        ("Informaci√≥n del Dashboard", demo_dashboard_info),
        ("An√°lisis T√©cnico", demo_technical_analysis),
        ("Gesti√≥n de Riesgo", demo_risk_management),
        ("Generaci√≥n de Se√±ales", demo_signal_generation),
        ("Backtesting", demo_backtesting),
        ("Monitoreo de Rendimiento", demo_monitoring),
    ]
    
    try:
        for i, (name, demo_func) in enumerate(demos, 1):
            print(f"\n{'='*20} DEMO {i}/{len(demos)} {'='*20}")
            print(f"‚ñ∂Ô∏è  {name}")
            
            try:
                demo_func()
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è  Demo interrumpido por el usuario")
                break
            except Exception as e:
                print(f"\n‚ùå Error en demo: {e}")
            
            if i < len(demos):
                print(f"\n‚è≥ Continuando al siguiente demo en 3 segundos...")
                time.sleep(3)
        
        print_header("DEMO COMPLETADO")
        print("üéâ Has visto las principales capacidades del Trading AI!")
        print("")
        print("üöÄ Pr√≥ximos pasos:")
        print("1. ./scripts/install.sh           # Instalar dependencias")
        print("2. ./scripts/run_tests.sh         # Verificar funcionamiento")
        print("3. python main.py dashboard       # Lanzar interfaz web")
        print("4. python main.py signals         # Generar se√±ales reales")
        print("5. Ver docs/USAGE_GUIDE.md        # Gu√≠a detallada")
        print("")
        print("üìö Documentaci√≥n disponible:")
        print("   ‚Ä¢ README.md - Informaci√≥n general")
        print("   ‚Ä¢ docs/USAGE_GUIDE.md - Gu√≠a de uso detallada")
        print("   ‚Ä¢ docs/API_REFERENCE.md - Referencia de API")
        print("")
        print("‚ö†Ô∏è  IMPORTANTE: Este sistema es para an√°lisis y educaci√≥n.")
        print("   Siempre ejecuta operaciones manualmente tras revisar las se√±ales.")
        
    except KeyboardInterrupt:
        print("\n\nüëã Demo cancelado. ¬°Gracias por probar Trading AI!")

if __name__ == "__main__":
    main()